---
import '../styles/global.css';
import { ViewTransitions } from 'astro:transitions';

export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Full Stack Developer Portfolio" } = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>
    <ViewTransitions />
  </head>
  <body class="bg-background text-foreground antialiased">
    <div id="terminal-overlay" class="terminal-overlay">
      <div class="terminal-content">
        <span id="terminal-text"></span>
      </div>
    </div>
    <slot />
    <script is:inline>
      document.addEventListener('astro:page-load', () => {
        const cards = document.querySelectorAll('a.card-clickable[data-work-name]');

        cards.forEach(card => {
          card.addEventListener('click', (e) => {
            e.preventDefault();
            const workName = card.getAttribute('data-work-name');
            const targetUrl = card.getAttribute('href');

            showTerminalAnimation(workName, targetUrl);
          });
        });
      });

      function showTerminalAnimation(workName, targetUrl) {
        const overlay = document.getElementById('terminal-overlay');
        const textElement = document.getElementById('terminal-text');

        overlay.classList.add('active');

        const commands = [
          `> cd ${workName}/`,
          `> less experience.txt`
        ];

        let commandIndex = 0;

        function typeCommand() {
          if (commandIndex >= commands.length) {
            setTimeout(() => {
              window.location.href = targetUrl;
            }, 100);
            return;
          }

          const command = commands[commandIndex];
          let charIndex = 0;

          const baseText = commands.slice(0, commandIndex).join('\n') + (commandIndex > 0 ? '\n' : '');

          const typingInterval = setInterval(() => {
            if (charIndex < command.length) {
              textElement.textContent = baseText + command.substring(0, charIndex + 1);
              charIndex++;
            } else {
              clearInterval(typingInterval);
              commandIndex++;
              setTimeout(typeCommand, 50);
            }
          }, 10);
        }

        typeCommand();
      }
    </script>
  </body>
</html>
